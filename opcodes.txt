

(***)   = SCHIP
(*)     = originally undocumented


|| CODE || EXPLANATON
========++============================================================
|| 0NNN || Call 1802 machine code program at NNN (not implemented)
========++============================================================
|| 00CN || Scroll down N lines (***)
========++============================================================
|| 00FB || Scroll 4 pixels right (***)
========++============================================================
|| 00FC || Scroll 4 pixels left (***)
========++============================================================
|| 00FD || Quit the emulator (***)
========++============================================================
|| 00FE || Set CHIP-8 graphic mode (***)
========++============================================================
|| 00FF || Set SCHIP graphic mode (***)
========++============================================================
|| 00E0 || Erase the screen
========++============================================================
|| 00EE || Return from a CHIP-8 sub-routine
========++============================================================
|| 1NNN || Jump to NNN
========++============================================================
|| 2NNN || Call CHIP-8 sub-routine at NNN (16 successive calls max)
========++============================================================
|| 3XKK || Skip next instruction if VX == KK
========++============================================================
|| 4XKK || Skip next instruction if VX != KK
========++============================================================
|| 5XY0 || Skip next instruction if VX == VY
========++============================================================
|| 6XKK || VX = KK
========++============================================================
|| 7XKK || VX = VX + KK
========++============================================================
|| 8XY0 || VX = VY
========++============================================================
|| 8XY1 || VX = VX OR VY
========++============================================================
|| 8XY2 || VX = VX AND VY
========++============================================================
|| 8XY3 || VX = VX XOR VY (*)
========++============================================================
|| 8XY4 || VX = VX + VY, VF = carry
========++============================================================
|| 8XY5 || VX = VX - VY, VF = not borrow 
========++============================================================
|| 8XY6 || VX = VX SHR 1 (VX=VX/2), VF = carry
========++============================================================
|| 8XY7 || VX = VY - VX, VF = not borrow (*) 
========++============================================================
|| 8XYE || VX = VX SHL 1 (VX=VX*2), VF = carry
========++============================================================
|| 9XY0 || Skip next instruction if VX != VY
========++============================================================
|| ANNN || I = NNN
========++============================================================
|| BNNN || Jump to NNN + V0
========++============================================================
|| CXKK || VX = Random number AND KK
========++============================================================
|| DXYN || Draws a sprite at (VX,VY) starting at M(I). VF = collision.
||      || If N=0, draws the 16 x 16 sprite, else an 8 x N sprite.
========++============================================================
|| EX9E || Skip next instruction if key VX pressed
========++============================================================
|| EXA1 || Skip next instruction if key VX not pressed
========++============================================================
|| FX07 || VX = Delay timer
========++============================================================
|| FX0A || Waits a keypress and stores it in VX
========++============================================================
|| FX15 || Delay timer = VX
========++============================================================
|| FX18 || Sound timer = VX
========++============================================================
|| FX1E || I = I + VX
========++============================================================
|| FX29 || I points to the 4 x 5 font sprite of hex char in VX
========++============================================================
|| FX33 || Store BCD representation of VX in M(I)...M(I+2)
========++============================================================
|| FX55 || Save V0...VX in memory starting at M(I)
========++============================================================
|| FX65 || Load V0...VX from memory starting at M(I)
========++============================================================
|| FX75 || Save V0...VX (X<8) in the HP48 flags (***)
========++============================================================
|| FX85 || Load V0...VX (X<8) from the HP48 flags (***)




